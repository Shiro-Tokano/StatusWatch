// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using StatusWatch.Infrastructure;

#nullable disable

namespace StatusWatch.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250810165802_Incidents_Mvp_Fix")]
    partial class Incidents_Mvp_Fix
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("StatusWatch.Domain.Entities.Incident", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("OpenReason")
                        .HasColumnType("text");

                    b.Property<DateTime>("OpenedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ResolveReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ResolvedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId", "Status");

                    b.ToTable("Incidents");
                });

            modelBuilder.Entity("StatusWatch.Domain.Entities.IncidentEvent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("IncidentId")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("TimestampUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("IncidentId", "TimestampUtc");

                    b.ToTable("IncidentEvents");
                });

            modelBuilder.Entity("StatusWatch.Domain.Entities.Probe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan>("Interval")
                        .HasColumnType("interval");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("NextRunAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer");

                    b.Property<string>("Target")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NextRunAtUtc");

                    b.HasIndex("ServiceId");

                    b.ToTable("Probes");
                });

            modelBuilder.Entity("StatusWatch.Domain.Entities.ProbeResult", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Error")
                        .HasColumnType("text");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("boolean");

                    b.Property<int?>("LatencyMs")
                        .HasColumnType("integer");

                    b.Property<int>("ProbeId")
                        .HasColumnType("integer");

                    b.Property<int?>("StatusCode")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProbeId", "Timestamp");

                    b.ToTable("ProbeResults");
                });

            modelBuilder.Entity("StatusWatch.Domain.Entities.ProbeStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FailStreak")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("LastIsSuccess")
                        .HasColumnType("boolean");

                    b.Property<int>("ProbeId")
                        .HasColumnType("integer");

                    b.Property<int>("SuccessStreak")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProbeId")
                        .IsUnique();

                    b.ToTable("ProbeStatuses");
                });

            modelBuilder.Entity("StatusWatch.Domain.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("StatusWatch.Domain.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId", "Name")
                        .IsUnique();

                    b.ToTable("Services");
                });

            modelBuilder.Entity("StatusWatch.Domain.Entities.Incident", b =>
                {
                    b.HasOne("StatusWatch.Domain.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("StatusWatch.Domain.Entities.IncidentEvent", b =>
                {
                    b.HasOne("StatusWatch.Domain.Entities.Incident", "Incident")
                        .WithMany("Events")
                        .HasForeignKey("IncidentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Incident");
                });

            modelBuilder.Entity("StatusWatch.Domain.Entities.Probe", b =>
                {
                    b.HasOne("StatusWatch.Domain.Entities.Service", "Service")
                        .WithMany("Probes")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("StatusWatch.Domain.Entities.ProbeResult", b =>
                {
                    b.HasOne("StatusWatch.Domain.Entities.Probe", "Probe")
                        .WithMany("Results")
                        .HasForeignKey("ProbeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Probe");
                });

            modelBuilder.Entity("StatusWatch.Domain.Entities.ProbeStatus", b =>
                {
                    b.HasOne("StatusWatch.Domain.Entities.Probe", "Probe")
                        .WithMany()
                        .HasForeignKey("ProbeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Probe");
                });

            modelBuilder.Entity("StatusWatch.Domain.Entities.Service", b =>
                {
                    b.HasOne("StatusWatch.Domain.Entities.Project", "Project")
                        .WithMany("Services")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("StatusWatch.Domain.Entities.Incident", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("StatusWatch.Domain.Entities.Probe", b =>
                {
                    b.Navigation("Results");
                });

            modelBuilder.Entity("StatusWatch.Domain.Entities.Project", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("StatusWatch.Domain.Entities.Service", b =>
                {
                    b.Navigation("Probes");
                });
#pragma warning restore 612, 618
        }
    }
}
